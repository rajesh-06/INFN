{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00f4373f",
   "metadata": {},
   "outputs": [],
   "source": [
    "TMultiGraph *pull_graph(TGraphErrors *graph, int mstyle ){\n",
    "    float sumy =0;\n",
    "    float erry= 0; \n",
    "    TMultiGraph *mgraph = new TMultiGraph();\n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        sumy += graph->GetY()[i];\n",
    "\n",
    "        erry += graph->GetErrorX(i)*graph->GetErrorX(i); \n",
    "    \n",
    "    }\n",
    "\n",
    "    float avgy = sumy/graph->GetN();\n",
    "    erry = TMath::Sqrt(erry)/graph->GetN();\n",
    "    \n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        TGraph * pull_gr = new TGraph();\n",
    "        pull_gr->SetName(ang_name[i]);\n",
    "        float pull = (graph->GetY()[i]-avgy)/erry;\n",
    "        //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "        pull_gr->SetPoint(0,i, pull);\n",
    "        \n",
    "        pull_gr->SetMarkerSize(5);\n",
    "\n",
    "        pull_gr->SetMarkerColor(colors[i]);\n",
    "        pull_gr->SetMarkerStyle(mstyle);\n",
    "\n",
    "        \n",
    "        mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}\n",
    "    \n",
    "   return mgraph;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bac80785",
   "metadata": {},
   "outputs": [],
   "source": [
    "void plot_pull(TGraphErrors*graph ,int mstyle)\n",
    "{\n",
    "    auto Gr = pull_graph(graph,mstyle);\n",
    "    TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "    canvas->SetLeftMargin(0.2);\n",
    "    Gr->Draw(\"AP\");\n",
    "    TAxis *xAxis = Gr->GetXaxis();\n",
    "    for (int i=0;i< graph->GetN(); i++){\n",
    "      xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "    }\n",
    "\n",
    "    Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "   // Gr->SetTitle(graph->GetName());\n",
    "\n",
    "    TLegend *legend1 = new TLegend(0.7, 0.7, 0.8, 0.8);\n",
    "    legend1->AddEntry(Gr, graph->GetName(), \"m\");\n",
    "    legend1->Draw();\n",
    "    canvas->Draw();\n",
    "    //canvas->SaveAs(\"average_error_A1.png\");    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ef07bf42",
   "metadata": {},
   "outputs": [],
   "source": [
    "file = TFile::Open(\"outfile_2.root\");\n",
    "\n",
    "int colors[] = {33, 43, 18, 54,66};\n",
    "vector < const char *>  ang_name = {\"40deg\", \"40deg-a\",\"40deg-b\", \"40deg-c\", \"40deg-d\"};\n",
    "double measurement[] ={1.,2.,3.,4.,5.};\n",
    "\n",
    "TGraphErrors * Sen_A1 = (TGraphErrors*)Sensor_A1->Clone(\"Sen_A1\");\n",
    "TGraphErrors * Sen_A2 = (TGraphErrors*)Sensor_A2->Clone(\"Sen_A2\");\n",
    "TGraphErrors * Sen_A3 = (TGraphErrors*)Sensor_A3->Clone(\"Sen_A3\");\n",
    "TGraphErrors * Sen_A4 = (TGraphErrors*)Sensor_A4->Clone(\"Sen_A4\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0eecce88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: canvas\n"
     ]
    }
   ],
   "source": [
    "//plot_pull(Sen_A1,47);\n",
    "plot_pull(Sen_A4,47);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80997b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "auto A1_Gr = pull_graph(Sen_A1);\n",
    "\n",
    "\n",
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "\n",
    "A1_Gr->Draw(\"AP\");\n",
    "TAxis *xAxis = A1_Gr->GetXaxis();\n",
    "\n",
    "for (int i=0;i< A1_Gr->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "\n",
    "A1_Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc5aace3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1f8dd411",
   "metadata": {},
   "outputs": [],
   "source": [
    "float sumy =0;\n",
    "float erry= 0; \n",
    "float sumsq = 0;\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "     //cout<<\"X values \\n \"<< Sen_A1->GetX()[i]<<\" +-   \"<<  Sen_A1->GetErrorX(i)<< \" \\n\\n Y values \\n\" <<  Sen_A1->GetY()[i]<<\" +- \"<<Sen_A1->GetErrorY(i)<<endl;\n",
    "    sumy += Sen_A1->GetY()[i];\n",
    "    sumsq += Sen_A1->GetY()[i] *Sen_A1->GetY()[i];\n",
    "    erry += Sen_A1->GetErrorX(i)*Sen_A1->GetErrorX(i); \n",
    "   // cout<<<<\"   \" <<  Sen_A1->GetErrorY(i)<<endl;\n",
    "\n",
    "    \n",
    "}\n",
    "\n",
    "float avgy = sumy/Sen_A1->GetN();\n",
    "double variance = (sumsq / Sen_A1->GetN()) - avgy*avgy;\n",
    "erry = TMath::Sqrt(erry)/Sen_A1->GetN();\n",
    "\n",
    "//double std = TMath::Sqrt(variance);\n",
    "//cout << erry << endl;\n",
    "//cout << std << endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cafc5c3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "TMultiGraph * mgraph = new TMultiGraph();\n",
    "\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "    TGraph * pull_gr = new TGraph();\n",
    "    pull_gr->SetName(ang_name[i]);\n",
    "    float pull = (Sen_A1->GetY()[i]-avgy)/erry;\n",
    "    \n",
    "    //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetPoint(0,i, pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetMarkerSize(5);\n",
    "\n",
    "    pull_gr->SetMarkerColor(colors[i]);\n",
    "    pull_gr->SetMarkerStyle(43);\n",
    "    \n",
    "    //TAxis *xAxis = pull_gr->GetXaxis();\n",
    "    //xAxis->SetBinLabel(1,ang_name[i]);\n",
    "//pull_gr->SetMarkerColor(38);\n",
    "    \n",
    "    mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c622bfdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: canvas\n",
      "Info in <TCanvas::Print>: png file average_error_A1.png has been created\n"
     ]
    }
   ],
   "source": [
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "//TGraph *name = newTGraph();\n",
    "\n",
    "\n",
    "mgraph->Draw(\"AP\");\n",
    "TAxis *xAxis = mgraph->GetXaxis();\n",
    "\n",
    "for (int i=0;i< Sen_A1->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "//mgraph->GetXaxis()->SetTitle(\"Angle\");\n",
    "\n",
    "mgraph->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "//canvas->BuildLegend(0.6,0.6,0.8,0.8);\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d80884dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n"
     ]
    }
   ],
   "source": [
    "cout << xAxis->FindFixBin(1) <<endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "878a676f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d883a421",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
