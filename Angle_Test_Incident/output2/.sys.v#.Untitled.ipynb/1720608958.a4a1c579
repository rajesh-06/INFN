{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b61df8c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Error in <TNetXNGFile::Open>: [ERROR] Server responded with an error: [3001] Required argument not present\n"
     ]
    }
   ],
   "source": [
    "file = TFile::Open(\"outfile_2.root\");\n",
    "\n",
    "int colors[] = {33, 43, 18, 54,66};\n",
    "vector < const char *>  ang_name = {\"40deg\", \"40deg-a\",\"40deg-b\", \"40deg-c\", \"40deg-d\"};\n",
    "double measurement[] ={1.,2.,3.,4.,5.};"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b3086cc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "TMultiGraph *pull_graph(TGraphErrors *graph, int mstyle ){\n",
    "    float sumy =0;\n",
    "    float erry= 0; \n",
    "    TMultiGraph *mgraph = new TMultiGraph();\n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        sumy += graph->GetY()[i];\n",
    "\n",
    "        erry += graph->GetErrorX(i)*graph->GetErrorX(i); \n",
    "    \n",
    "    }\n",
    "\n",
    "    float avgy = sumy/graph->GetN();\n",
    "    erry = TMath::Sqrt(erry)/graph->GetN();\n",
    "    \n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        TGraph * pull_gr = new TGraph();\n",
    "        pull_gr->SetName(ang_name[i]);\n",
    "        float pull = (graph->GetY()[i]-avgy)/erry;\n",
    "\n",
    "        //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "        pull_gr->SetPoint(0,i, pull);\n",
    "        \n",
    "        pull_gr->SetMarkerSize(5);\n",
    "\n",
    "        pull_gr->SetMarkerColor(colors[i]);\n",
    "        pull_gr->SetMarkerStyle(mstyle);\n",
    "\n",
    "        \n",
    "        mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}\n",
    "    \n",
    "   return mgraph;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5f69fb0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "void plot_pull(TGraphErrors*graph ,int mstyle)\n",
    "{\n",
    "    auto Gr = pull_graph(graph,3);\n",
    "    TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "    canvas->SetLeftMargin(0.2);\n",
    "    Gr->Draw(\"AP\");\n",
    "    TAxis *xAxis = Gr->GetXaxis();\n",
    "    for (int i=0;i< graph->GetN(); i++){\n",
    "      xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "    }\n",
    "\n",
    "    Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "\n",
    "    canvas->Draw();\n",
    "    //canvas->SaveAs(\"average_error_A1.png\");    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a40fdab8",
   "metadata": {},
   "outputs": [],
   "source": [
    "TGraphErrors * Sen_A1 = (TGraphErrors*)Sensor_A1->Clone(\"Sen_A1\");\n",
    "TGraphErrors * Sen_A2 = (TGraphErrors*)Sensor_A2->Clone(\"Sen_A2\");\n",
    "TGraphErrors * Sen_A3 = (TGraphErrors*)Sensor_A3->Clone(\"Sen_A3\");\n",
    "TGraphErrors * Sen_A4 = (TGraphErrors*)Sensor_A4->Clone(\"Sen_A4\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cdf75384",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: canvas\n"
     ]
    }
   ],
   "source": [
    "plot_pull(Sen_A3,3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ff82b9ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_42:2:2: error: Syntax error\n",
      " auto A1_Gr = pull_graph(Sen_A1);\n",
      " ^\n",
      "FunctionDecl 0x8172da0 <input_line_42:1:1, line:22:1> line:1:6 __cling_Un1Qu318 'void (void *)'\n",
      "|-ParmVarDecl 0x8172ce8 <col:23, col:29> col:29 vpClingValue 'void *'\n",
      "|-CompoundStmt 0x7fd4880479a8 <col:43, line:22:1>\n",
      "| |-DeclStmt 0x8173258 <line:2:2, col:33>\n",
      "| | `-VarDecl 0x8172ea8 <col:2, col:32> col:7 used A1_Gr 'auto' cinit\n",
      "| |   `-CallExpr 0x8173230 <col:15, col:32> '<dependent type>'\n",
      "| |     |-DeclRefExpr 0x81730e0 <col:15> '<dependent type>' lvalue Var 0x8173018 'pull_graph' '<dependent type>'\n",
      "| |     `-DeclRefExpr 0x81731f0 <col:26> '<dependent type>' lvalue Var 0x8173128 'Sen_A1' '<dependent type>'\n",
      "| |-DeclStmt 0x8181f48 <line:5:1, col:54>\n",
      "| | `-VarDecl 0x8173348 <col:1, col:53> col:11 used canvas 'TCanvas *' cinit\n",
      "| |   `-CXXNewExpr 0x8181ee8 <col:20, col:53> 'TCanvas *' CXXMethod 0x6d673f0 'operator new' 'void *(size_t)'\n",
      "| |     `-CXXConstructExpr 0x8181be0 <col:24, col:53> 'TCanvas' 'void (const char *, const char *, Int_t, Int_t)'\n",
      "| |       |-ImplicitCastExpr 0x8181bb0 <col:32> 'const char *' <ArrayToPointerDecay>\n",
      "| |       | `-StringLiteral 0x81733b0 <col:32> 'const char [7]' lvalue \"canvas\"\n",
      "| |       |-ImplicitCastExpr 0x8181bc8 <col:41> 'const char *' <ArrayToPointerDecay>\n",
      "| |       | `-StringLiteral 0x81733d0 <col:41> 'const char [1]' lvalue \"\"\n",
      "| |       |-IntegerLiteral 0x81733e8 <col:44> 'int' 1200\n",
      "| |       `-IntegerLiteral 0x8173408 <col:49> 'int' 1200\n",
      "| |-CXXMemberCallExpr 0x8182180 <line:6:1, col:26> 'void'\n",
      "| | |-MemberExpr 0x8182130 <col:1, col:9> '<bound member function type>' ->SetLeftMargin 0x8181fa0\n",
      "| | | `-ImplicitCastExpr 0x81821d8 <col:1> 'TAttPad *' <UncheckedDerivedToBase (TPad -> TVirtualPad -> TAttPad)>\n",
      "| | |   `-ImplicitCastExpr 0x8181f80 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |     `-DeclRefExpr 0x8181f60 <col:1> 'TCanvas *' lvalue Var 0x8173348 'canvas' 'TCanvas *'\n",
      "| | `-ImplicitCastExpr 0x8182208 <col:23> 'Float_t':'float' <FloatingCast>\n",
      "| |   `-FloatingLiteral 0x8182160 <col:23> 'double' 2.000000e-01\n",
      "| |-CallExpr 0x81822c8 <line:8:1, col:17> '<dependent type>'\n",
      "| | |-CXXDependentScopeMemberExpr 0x8182260 <col:1, col:8> '<dependent type>' lvalue ->Draw\n",
      "| | | `-DeclRefExpr 0x8182220 <col:1> 'auto' lvalue Var 0x8172ea8 'A1_Gr' 'auto'\n",
      "| | `-StringLiteral 0x81822a8 <col:13> 'const char [3]' lvalue \"AP\"\n",
      "| |-DeclStmt 0x81823f8 <line:9:1, col:33>\n",
      "| | `-VarDecl 0x8182308 <col:1, col:32> col:8 used xAxis 'TAxis *' cinit\n",
      "| |   `-CallExpr 0x81823d8 <col:16, col:32> '<dependent type>'\n",
      "| |     `-CXXDependentScopeMemberExpr 0x8182390 <col:16, col:23> '<dependent type>' lvalue ->GetXaxis\n",
      "| |       `-DeclRefExpr 0x8182370 <col:16> 'auto' lvalue Var 0x8172ea8 'A1_Gr' 'auto'\n",
      "| |-ForStmt 0x7fd488046998 <line:11:1, line:14:1>\n",
      "| | |-DeclStmt 0x81824d8 <line:11:6, col:13>\n",
      "| | | `-VarDecl 0x8182430 <col:6, col:12> col:10 used i 'int' cinit\n",
      "| | |   `-IntegerLiteral 0x8182498 <col:12> 'int' 0\n",
      "| | |-<<<NULL>>>\n",
      "| | |-CXXOperatorCallExpr 0x7fd488044f28 <col:14, col:29> '<dependent type>' '<'\n",
      "| | | |-UnresolvedLookupExpr 0x7fd488044cc8 <col:15> '<overloaded function type>' lvalue (ADL) = 'operator<' 0x6467ee8 0x6468688 0x6468e88 0x6499140 0x64aa1d0 0x64bcf80 0x6c05cb0 0x6c061d8 0x6c06718 0x65da4f8 0x4f1d188 0x4f2d328 0x57e8350 0x57e9930 0x57ead30 0x596a550 0x596e3e8 0x596ef30 0x59c9e98 0x5cbddc8 0x52de818 0x5f6a1e0 0x5f6ade0 0x5f6b7d0 0x5f6c1c0 0x5f6cc10 0x602bb38 0x602c478 0x602cde8 0x4e91de8 0x4f1fad0 0x4f20418 0x4f2ca40 0x4f2fd30 0x512f770 0x5425030 0x5425d80 0x543e7d0 0x543f038 0x5528018 0x562da10 0x56325e8 0x579bb68 0x57fb028 0x57fd708 0x58570b0 0x58580a8 0x58a2c68 0x58a3948 0x596d6c8 0x596df58 0x5975330 0x59cb2d8 0x59cbde0 0x5e41e18 0x5a68f88 0x5a92738 0x5bf5070 0x5c50d70 0x5c65640 0x5cbf690 0x52e00e0 0x628b738 0x628c140 0x628c9f0 0x628d0a0 0x5e31aa8 0x5e3e068\n",
      "| | | |-DeclRefExpr 0x81824f0 <col:14> 'int' lvalue Var 0x8182430 'i' 'int'\n",
      "| | | `-CallExpr 0x8182578 <col:17, col:29> '<dependent type>'\n",
      "| | |   `-CXXDependentScopeMemberExpr 0x8182530 <col:17, col:24> '<dependent type>' lvalue ->GetN\n",
      "| | |     `-DeclRefExpr 0x8182510 <col:17> 'auto' lvalue Var 0x8172ea8 'A1_Gr' 'auto'\n",
      "| | |-UnaryOperator 0x7fd488044f80 <col:32, col:33> 'int' postfix '++'\n",
      "| | | `-DeclRefExpr 0x7fd488044f60 <col:32> 'int' lvalue Var 0x8182430 'i' 'int'\n",
      "| | `-CompoundStmt 0x7fd488046980 <col:36, line:14:1>\n",
      "| |   `-CallExpr 0x7fd488046950 <line:13:6, col:57> '<dependent type>'\n",
      "| |     |-MemberExpr 0x7fd488045240 <col:6, col:13> '<bound member function type>' ->SetBinLabel 0x7fd488044ff8\n",
      "| |     | `-ImplicitCastExpr 0x7fd488044fd8 <col:6> 'TAxis *' <LValueToRValue>\n",
      "| |     |   `-DeclRefExpr 0x7fd488044f98 <col:6> 'TAxis *' lvalue Var 0x8182308 'xAxis' 'TAxis *'\n",
      "| |     |-CXXMemberCallExpr 0x7fd4880456d8 <col:25, col:44> 'Int_t':'int'\n",
      "| |     | |-MemberExpr 0x7fd4880456a8 <col:25, col:32> '<bound member function type>' ->FindFixBin 0x7fd4880452b0\n",
      "| |     | | `-ImplicitCastExpr 0x7fd488045728 <col:25> 'const TAxis *' <NoOp>\n",
      "| |     | |   `-ImplicitCastExpr 0x7fd488045290 <col:25> 'TAxis *' <LValueToRValue>\n",
      "| |     | |     `-DeclRefExpr 0x7fd488045270 <col:25> 'TAxis *' lvalue Var 0x8182308 'xAxis' 'TAxis *'\n",
      "| |     | `-ImplicitCastExpr 0x7fd488045758 <col:43> 'Double_t':'double' <IntegralToFloating>\n",
      "| |     |   `-ImplicitCastExpr 0x7fd488045740 <col:43> 'int' <LValueToRValue>\n",
      "| |     |     `-DeclRefExpr 0x7fd488045688 <col:43> 'int' lvalue Var 0x8182430 'i' 'int'\n",
      "| |     `-ArraySubscriptExpr 0x7fd488046930 <col:46, col:56> '<dependent type>' lvalue\n",
      "| |       |-DeclRefExpr 0x7fd4880468d0 <col:46> '<dependent type>' lvalue Var 0x7fd488046810 'ang_name' '<dependent type>'\n",
      "| |       `-DeclRefExpr 0x7fd488046910 <col:55> 'int' lvalue Var 0x8182430 'i' 'int'\n",
      "| |-CallExpr 0x7fd488046ac0 <line:16:1, col:35> '<dependent type>'\n",
      "| | |-CXXDependentScopeMemberExpr 0x7fd488046a58 <col:1, col:20> '<dependent type>' lvalue ->SetTitle\n",
      "| | | `-CallExpr 0x7fd488046a38 <col:1, col:17> '<dependent type>'\n",
      "| | |   `-CXXDependentScopeMemberExpr 0x7fd4880469f0 <col:1, col:8> '<dependent type>' lvalue ->GetYaxis\n",
      "| | |     `-DeclRefExpr 0x7fd4880469d0 <col:1> 'auto' lvalue Var 0x8172ea8 'A1_Gr' 'auto'\n",
      "| | `-StringLiteral 0x7fd488046aa0 <col:29> 'const char [5]' lvalue \"PULL\"\n",
      "| |-CXXMemberCallExpr 0x7fd4880471b0 <line:19:1, col:14> 'void'\n",
      "| | |-MemberExpr 0x7fd488047180 <col:1, col:9> '<bound member function type>' ->Draw 0x7fd488046b28\n",
      "| | | `-ImplicitCastExpr 0x7fd488046b08 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |   `-DeclRefExpr 0x7fd488046ae8 <col:1> 'TCanvas *' lvalue Var 0x8173348 'canvas' 'TCanvas *'\n",
      "| | `-CXXDefaultArgExpr 0x7fd4880471d8 <<invalid sloc>> 'const char *'\n",
      "| |-CXXMemberCallExpr 0x7fd4880478f0 <line:20:1, col:38> 'void'\n",
      "| | |-MemberExpr 0x7fd488047890 <col:1, col:9> '<bound member function type>' ->SaveAs 0x7fd488047238\n",
      "| | | `-ImplicitCastExpr 0x7fd488047948 <col:1> 'const TPad *' <UncheckedDerivedToBase (TPad)>\n",
      "| | |   `-ImplicitCastExpr 0x7fd488047218 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |     `-DeclRefExpr 0x7fd4880471f8 <col:1> 'TCanvas *' lvalue Var 0x8173348 'canvas' 'TCanvas *'\n",
      "| | |-ImplicitCastExpr 0x7fd488047968 <col:16> 'const char *' <ArrayToPointerDecay>\n",
      "| | | `-StringLiteral 0x7fd4880478c0 <col:16> 'const char [21]' lvalue \"average_error_A1.png\"\n",
      "| | `-CXXDefaultArgExpr 0x7fd488047980 <<invalid sloc>> 'const char *'\n",
      "| `-NullStmt 0x7fd4880479a0 <line:21:1>\n",
      "|-AnnotateAttr 0x8172f80 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "|-AnnotateAttr 0x8173080 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "|-AnnotateAttr 0x8173190 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "`-AnnotateAttr 0x7fd488046878 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "<<<NULL>>>\n"
     ]
    }
   ],
   "source": [
    "auto A1_Gr = pull_graph(Sen_A1);\n",
    "\n",
    "\n",
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "\n",
    "A1_Gr->Draw(\"AP\");\n",
    "TAxis *xAxis = A1_Gr->GetXaxis();\n",
    "\n",
    "for (int i=0;i< A1_Gr->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "\n",
    "A1_Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1314f09c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9a910aa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "float sumy =0;\n",
    "float erry= 0; \n",
    "float sumsq = 0;\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "     //cout<<\"X values \\n \"<< Sen_A1->GetX()[i]<<\" +-   \"<<  Sen_A1->GetErrorX(i)<< \" \\n\\n Y values \\n\" <<  Sen_A1->GetY()[i]<<\" +- \"<<Sen_A1->GetErrorY(i)<<endl;\n",
    "    sumy += Sen_A1->GetY()[i];\n",
    "    sumsq += Sen_A1->GetY()[i] *Sen_A1->GetY()[i];\n",
    "    erry += Sen_A1->GetErrorX(i)*Sen_A1->GetErrorX(i); \n",
    "   // cout<<<<\"   \" <<  Sen_A1->GetErrorY(i)<<endl;\n",
    "\n",
    "    \n",
    "}\n",
    "\n",
    "float avgy = sumy/Sen_A1->GetN();\n",
    "double variance = (sumsq / Sen_A1->GetN()) - avgy*avgy;\n",
    "erry = TMath::Sqrt(erry)/Sen_A1->GetN();\n",
    "\n",
    "//double std = TMath::Sqrt(variance);\n",
    "//cout << erry << endl;\n",
    "//cout << std << endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f1010a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "TMultiGraph * mgraph = new TMultiGraph();\n",
    "\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "    TGraph * pull_gr = new TGraph();\n",
    "    pull_gr->SetName(ang_name[i]);\n",
    "    float pull = (Sen_A1->GetY()[i]-avgy)/erry;\n",
    "    \n",
    "    //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetPoint(0,i, pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetMarkerSize(5);\n",
    "\n",
    "    pull_gr->SetMarkerColor(colors[i]);\n",
    "    pull_gr->SetMarkerStyle(43);\n",
    "    \n",
    "    //TAxis *xAxis = pull_gr->GetXaxis();\n",
    "    //xAxis->SetBinLabel(1,ang_name[i]);\n",
    "//pull_gr->SetMarkerColor(38);\n",
    "    \n",
    "    mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1eb9c8f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: canvas\n",
      "Info in <TCanvas::Print>: png file average_error_A1.png has been created\n"
     ]
    }
   ],
   "source": [
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "//TGraph *name = newTGraph();\n",
    "\n",
    "\n",
    "mgraph->Draw(\"AP\");\n",
    "TAxis *xAxis = mgraph->GetXaxis();\n",
    "\n",
    "for (int i=0;i< Sen_A1->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "//mgraph->GetXaxis()->SetTitle(\"Angle\");\n",
    "\n",
    "mgraph->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "//canvas->BuildLegend(0.6,0.6,0.8,0.8);\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c9bdbf94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n"
     ]
    }
   ],
   "source": [
    "cout << xAxis->FindFixBin(1) <<endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7571bfb7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "086db7c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
