{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b736596f",
   "metadata": {},
   "outputs": [],
   "source": [
    "int colors[] = {33, 43, 23, 54,66};\n",
    "vector < const char *>  ang_name = {\"40deg\", \"40deg-a\",\"40deg-b\", \"40deg-c\", \"40deg-d\"};\n",
    "double measurement[] ={1.,2.,3.,4.,5.};\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "00f4373f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "TMultiGraph *pull_graph(TGraphErrors *graph, int mstyle ){\n",
    "    float sumy =0;\n",
    "    float erry= 0; \n",
    "    TMultiGraph *mgraph = new TMultiGraph();\n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        sumy += graph->GetY()[i];\n",
    "\n",
    "        erry += graph->GetErrorX(i)*graph->GetErrorX(i); \n",
    "    \n",
    "    }\n",
    "\n",
    "    float avgy = sumy/graph->GetN();\n",
    "    erry = TMath::Sqrt(erry)/graph->GetN();\n",
    "    \n",
    "    for(int i =0; i < graph->GetN(); i++){\n",
    "        TGraph * pull_gr = new TGraph();\n",
    "        pull_gr->SetName(ang_name[i]);\n",
    "        float pull = (graph->GetY()[i]-avgy)/erry;\n",
    "        //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "        pull_gr->SetPoint(0,i, pull);\n",
    "        \n",
    "        pull_gr->SetMarkerSize(5);\n",
    "\n",
    "        pull_gr->SetMarkerColor(colors[i]);\n",
    "        pull_gr->SetMarkerStyle(mstyle);\n",
    "\n",
    "        \n",
    "        mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}\n",
    "    \n",
    "   return mgraph;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bac80785",
   "metadata": {},
   "outputs": [],
   "source": [
    "void plot_pull(TGraphErrors*graph ,int mstyle)\n",
    "{\n",
    "    auto Gr = pull_graph(graph,mstyle);\n",
    "    TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "    canvas->SetLeftMargin(0.2);\n",
    "    Gr->Draw(\"AP\");\n",
    "    TAxis *xAxis = Gr->GetXaxis();\n",
    "    for (int i=0;i< graph->GetN(); i++){\n",
    "      xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "    }\n",
    "\n",
    "    Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "   // Gr->SetTitle(graph->GetName());\n",
    "\n",
    "    TLegend *legend1 = new TLegend(0.7, 0.7, 0.8, 0.8);\n",
    "    legend1->AddEntry(Gr, graph->GetName(), \"P\");\n",
    "    legend1->Draw();\n",
    "    canvas->Draw();\n",
    "    //canvas->SaveAs(\"average_error_A1.png\");    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ef07bf42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TNetXNGFile**\t\troot://eoshome-i01.cern.ch//eos/user/a/agautam/SWAN_projects/INFN/Laser_Rate_Check/output/outfile_2.root\t\n",
      " TNetXNGFile*\t\troot://eoshome-i01.cern.ch//eos/user/a/agautam/SWAN_projects/INFN/Laser_Rate_Check/output/outfile_2.root\t\n"
     ]
    }
   ],
   "source": [
    "file = TFile::Open(\"outfile_2.root\");\n",
    "\n",
    "file->ls();\n",
    "//TGraphErrors * Sen_A1 = (TGraphErrors*)Sensor_A1->Clone(\"Sensor_A1\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0eecce88",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_88:2:3: error: use of undeclared identifier 'plot_pull'\n",
      " (plot_pull(((*(class TGraphErrors **)0x7f58653f0028)), 43))\n",
      "  ^\n",
      "Error in <HandleInterpreterException>: Error evaluating expression (plot_pull(((*(class TGraphErrors **)0x7f58653f0028)), 43))\n",
      "Execution of your code was aborted.\n"
     ]
    }
   ],
   "source": [
    "plot_pull(Sen_A4,43);\n",
    "//plot_pull(Sen_A4,47);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80997b78",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "input_line_52:2:2: error: Syntax error\n",
      " auto A1_Gr = pull_graph(Sen_A1);\n",
      " ^\n",
      "FunctionDecl 0x7fa9757892c8 <input_line_52:1:1, line:22:1> line:1:6 __cling_Un1Qu321 'void (void *)'\n",
      "|-ParmVarDecl 0x7fa975789210 <col:23, col:29> col:29 vpClingValue 'void *'\n",
      "|-CompoundStmt 0x7fa9759608f8 <col:43, line:22:1>\n",
      "| |-DeclStmt 0x7fa975789778 <line:2:2, col:33>\n",
      "| | `-VarDecl 0x7fa9757893d0 <col:2, col:32> col:7 used A1_Gr 'auto' cinit\n",
      "| |   `-CallExpr 0x7fa975789750 <col:15, col:32> '<dependent type>'\n",
      "| |     |-DeclRefExpr 0x7fa975789600 <col:15> '<dependent type>' lvalue Var 0x7fa975789538 'pull_graph' '<dependent type>'\n",
      "| |     `-DeclRefExpr 0x7fa975789710 <col:26> '<dependent type>' lvalue Var 0x7fa975789648 'Sen_A1' '<dependent type>'\n",
      "| |-DeclStmt 0x7fa975932c28 <line:5:1, col:54>\n",
      "| | `-VarDecl 0x7fa975789868 <col:1, col:53> col:11 used canvas 'TCanvas *' cinit\n",
      "| |   `-CXXNewExpr 0x7fa975932bc8 <col:20, col:53> 'TCanvas *' CXXMethod 0x6d260a0 'operator new' 'void *(size_t)'\n",
      "| |     `-CXXConstructExpr 0x7fa9759328c0 <col:24, col:53> 'TCanvas' 'void (const char *, const char *, Int_t, Int_t)'\n",
      "| |       |-ImplicitCastExpr 0x7fa975932890 <col:32> 'const char *' <ArrayToPointerDecay>\n",
      "| |       | `-StringLiteral 0x7fa9757898d0 <col:32> 'const char [7]' lvalue \"canvas\"\n",
      "| |       |-ImplicitCastExpr 0x7fa9759328a8 <col:41> 'const char *' <ArrayToPointerDecay>\n",
      "| |       | `-StringLiteral 0x7fa9757898f0 <col:41> 'const char [1]' lvalue \"\"\n",
      "| |       |-IntegerLiteral 0x7fa975789908 <col:44> 'int' 1200\n",
      "| |       `-IntegerLiteral 0x7fa975789928 <col:49> 'int' 1200\n",
      "| |-CXXMemberCallExpr 0x7fa975932e60 <line:6:1, col:26> 'void'\n",
      "| | |-MemberExpr 0x7fa975932e10 <col:1, col:9> '<bound member function type>' ->SetLeftMargin 0x7fa975932c80\n",
      "| | | `-ImplicitCastExpr 0x7fa975932eb8 <col:1> 'TAttPad *' <UncheckedDerivedToBase (TPad -> TVirtualPad -> TAttPad)>\n",
      "| | |   `-ImplicitCastExpr 0x7fa975932c60 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |     `-DeclRefExpr 0x7fa975932c40 <col:1> 'TCanvas *' lvalue Var 0x7fa975789868 'canvas' 'TCanvas *'\n",
      "| | `-ImplicitCastExpr 0x7fa975932ee8 <col:23> 'Float_t':'float' <FloatingCast>\n",
      "| |   `-FloatingLiteral 0x7fa975932e40 <col:23> 'double' 2.000000e-01\n",
      "| |-CallExpr 0x7fa975932fa8 <line:8:1, col:17> '<dependent type>'\n",
      "| | |-CXXDependentScopeMemberExpr 0x7fa975932f40 <col:1, col:8> '<dependent type>' lvalue ->Draw\n",
      "| | | `-DeclRefExpr 0x7fa975932f00 <col:1> 'auto' lvalue Var 0x7fa9757893d0 'A1_Gr' 'auto'\n",
      "| | `-StringLiteral 0x7fa975932f88 <col:13> 'const char [3]' lvalue \"AP\"\n",
      "| |-DeclStmt 0x7fa9759330d8 <line:9:1, col:33>\n",
      "| | `-VarDecl 0x7fa975932fe8 <col:1, col:32> col:8 used xAxis 'TAxis *' cinit\n",
      "| |   `-CallExpr 0x7fa9759330b8 <col:16, col:32> '<dependent type>'\n",
      "| |     `-CXXDependentScopeMemberExpr 0x7fa975933070 <col:16, col:23> '<dependent type>' lvalue ->GetXaxis\n",
      "| |       `-DeclRefExpr 0x7fa975933050 <col:16> 'auto' lvalue Var 0x7fa9757893d0 'A1_Gr' 'auto'\n",
      "| |-ForStmt 0x7fa97595f8e8 <line:11:1, line:14:1>\n",
      "| | |-DeclStmt 0x7fa9759331b8 <line:11:6, col:13>\n",
      "| | | `-VarDecl 0x7fa975933110 <col:6, col:12> col:10 used i 'int' cinit\n",
      "| | |   `-IntegerLiteral 0x7fa975933178 <col:12> 'int' 0\n",
      "| | |-<<<NULL>>>\n",
      "| | |-CXXOperatorCallExpr 0x7fa97595dea8 <col:14, col:29> '<dependent type>' '<'\n",
      "| | | |-UnresolvedLookupExpr 0x7fa97595dc48 <col:15> '<overloaded function type>' lvalue (ADL) = 'operator<' 0x6425898 0x6426038 0x6426838 0x6456c10 0x6467ca0 0x647aa50 0x6bc3f20 0x6bc4448 0x6bc4988 0x65989d8 0x4edad78 0x4eeaf18 0x57a5cd0 0x57a72b0 0x57a86b0 0x5927d10 0x592bba8 0x592c6f0 0x5987658 0x5c7b688 0x529c158 0x5f27aa0 0x5f286a0 0x5f29090 0x5f29a80 0x5f2a4d0 0x5fe93f8 0x5fe9d38 0x5fea6a8 0x4e4f9d8 0x4edd6c0 0x4ede008 0x4eea630 0x4eed920 0x50ed570 0x53e1830 0x53e2580 0x53fb890 0x53fc0f8 0x54e5a48 0x55eb750 0x55eff98 0x57594e8 0x57b89a8 0x57bb088 0x5814a30 0x5815a28 0x5860568 0x5861248 0x592ae88 0x592b718 0x5932af0 0x5988a98 0x59895a0 0x5dff6d8 0x5a26748 0x5a4fef8 0x5bb28f0 0x5c0e610 0x5c22ee0 0x5c7cf50 0x529da20 0x6248ff8 0x6249a00 0x624a2b0 0x624a960 0x5def368 0x5dfb928\n",
      "| | | |-DeclRefExpr 0x7fa9759331d0 <col:14> 'int' lvalue Var 0x7fa975933110 'i' 'int'\n",
      "| | | `-CallExpr 0x7fa975933258 <col:17, col:29> '<dependent type>'\n",
      "| | |   `-CXXDependentScopeMemberExpr 0x7fa975933210 <col:17, col:24> '<dependent type>' lvalue ->GetN\n",
      "| | |     `-DeclRefExpr 0x7fa9759331f0 <col:17> 'auto' lvalue Var 0x7fa9757893d0 'A1_Gr' 'auto'\n",
      "| | |-UnaryOperator 0x7fa97595df00 <col:32, col:33> 'int' postfix '++'\n",
      "| | | `-DeclRefExpr 0x7fa97595dee0 <col:32> 'int' lvalue Var 0x7fa975933110 'i' 'int'\n",
      "| | `-CompoundStmt 0x7fa97595f8d0 <col:36, line:14:1>\n",
      "| |   `-CallExpr 0x7fa97595f8a0 <line:13:6, col:57> '<dependent type>'\n",
      "| |     |-MemberExpr 0x7fa97595e1c0 <col:6, col:13> '<bound member function type>' ->SetBinLabel 0x7fa97595df78\n",
      "| |     | `-ImplicitCastExpr 0x7fa97595df58 <col:6> 'TAxis *' <LValueToRValue>\n",
      "| |     |   `-DeclRefExpr 0x7fa97595df18 <col:6> 'TAxis *' lvalue Var 0x7fa975932fe8 'xAxis' 'TAxis *'\n",
      "| |     |-CXXMemberCallExpr 0x7fa97595e620 <col:25, col:44> 'Int_t':'int'\n",
      "| |     | |-MemberExpr 0x7fa97595e5f0 <col:25, col:32> '<bound member function type>' ->FindFixBin 0x7fa97595e230\n",
      "| |     | | `-ImplicitCastExpr 0x7fa97595e678 <col:25> 'const TAxis *' <NoOp>\n",
      "| |     | |   `-ImplicitCastExpr 0x7fa97595e210 <col:25> 'TAxis *' <LValueToRValue>\n",
      "| |     | |     `-DeclRefExpr 0x7fa97595e1f0 <col:25> 'TAxis *' lvalue Var 0x7fa975932fe8 'xAxis' 'TAxis *'\n",
      "| |     | `-ImplicitCastExpr 0x7fa97595e6a8 <col:43> 'Double_t':'double' <IntegralToFloating>\n",
      "| |     |   `-ImplicitCastExpr 0x7fa97595e690 <col:43> 'int' <LValueToRValue>\n",
      "| |     |     `-DeclRefExpr 0x7fa97595e5d0 <col:43> 'int' lvalue Var 0x7fa975933110 'i' 'int'\n",
      "| |     `-ArraySubscriptExpr 0x7fa97595f880 <col:46, col:56> '<dependent type>' lvalue\n",
      "| |       |-DeclRefExpr 0x7fa97595f820 <col:46> '<dependent type>' lvalue Var 0x7fa97595f760 'ang_name' '<dependent type>'\n",
      "| |       `-DeclRefExpr 0x7fa97595f860 <col:55> 'int' lvalue Var 0x7fa975933110 'i' 'int'\n",
      "| |-CallExpr 0x7fa97595fa10 <line:16:1, col:35> '<dependent type>'\n",
      "| | |-CXXDependentScopeMemberExpr 0x7fa97595f9a8 <col:1, col:20> '<dependent type>' lvalue ->SetTitle\n",
      "| | | `-CallExpr 0x7fa97595f988 <col:1, col:17> '<dependent type>'\n",
      "| | |   `-CXXDependentScopeMemberExpr 0x7fa97595f940 <col:1, col:8> '<dependent type>' lvalue ->GetYaxis\n",
      "| | |     `-DeclRefExpr 0x7fa97595f920 <col:1> 'auto' lvalue Var 0x7fa9757893d0 'A1_Gr' 'auto'\n",
      "| | `-StringLiteral 0x7fa97595f9f0 <col:29> 'const char [5]' lvalue \"PULL\"\n",
      "| |-CXXMemberCallExpr 0x7fa975960100 <line:19:1, col:14> 'void'\n",
      "| | |-MemberExpr 0x7fa9759600d0 <col:1, col:9> '<bound member function type>' ->Draw 0x7fa97595fa78\n",
      "| | | `-ImplicitCastExpr 0x7fa97595fa58 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |   `-DeclRefExpr 0x7fa97595fa38 <col:1> 'TCanvas *' lvalue Var 0x7fa975789868 'canvas' 'TCanvas *'\n",
      "| | `-CXXDefaultArgExpr 0x7fa975960128 <<invalid sloc>> 'const char *'\n",
      "| |-CXXMemberCallExpr 0x7fa975960840 <line:20:1, col:38> 'void'\n",
      "| | |-MemberExpr 0x7fa9759607e0 <col:1, col:9> '<bound member function type>' ->SaveAs 0x7fa975960188\n",
      "| | | `-ImplicitCastExpr 0x7fa975960898 <col:1> 'const TPad *' <UncheckedDerivedToBase (TPad)>\n",
      "| | |   `-ImplicitCastExpr 0x7fa975960168 <col:1> 'TCanvas *' <LValueToRValue>\n",
      "| | |     `-DeclRefExpr 0x7fa975960148 <col:1> 'TCanvas *' lvalue Var 0x7fa975789868 'canvas' 'TCanvas *'\n",
      "| | |-ImplicitCastExpr 0x7fa9759608b8 <col:16> 'const char *' <ArrayToPointerDecay>\n",
      "| | | `-StringLiteral 0x7fa975960810 <col:16> 'const char [21]' lvalue \"average_error_A1.png\"\n",
      "| | `-CXXDefaultArgExpr 0x7fa9759608d0 <<invalid sloc>> 'const char *'\n",
      "| `-NullStmt 0x7fa9759608f0 <line:21:1>\n",
      "|-AnnotateAttr 0x7fa9757894a8 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "|-AnnotateAttr 0x7fa9757895a0 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "|-AnnotateAttr 0x7fa9757896b0 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "`-AnnotateAttr 0x7fa97595f7c8 <<invalid sloc>> Implicit R\"ATTRDUMP(__ResolveAtRuntime)ATTRDUMP\"\n",
      "<<<NULL>>>\n"
     ]
    }
   ],
   "source": [
    "auto A1_Gr = pull_graph(Sen_A1);\n",
    "\n",
    "\n",
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "\n",
    "A1_Gr->Draw(\"AP\");\n",
    "TAxis *xAxis = A1_Gr->GetXaxis();\n",
    "\n",
    "for (int i=0;i< A1_Gr->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "\n",
    "A1_Gr->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc5aace3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1f8dd411",
   "metadata": {},
   "outputs": [],
   "source": [
    "float sumy =0;\n",
    "float erry= 0; \n",
    "float sumsq = 0;\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "     //cout<<\"X values \\n \"<< Sen_A1->GetX()[i]<<\" +-   \"<<  Sen_A1->GetErrorX(i)<< \" \\n\\n Y values \\n\" <<  Sen_A1->GetY()[i]<<\" +- \"<<Sen_A1->GetErrorY(i)<<endl;\n",
    "    sumy += Sen_A1->GetY()[i];\n",
    "    sumsq += Sen_A1->GetY()[i] *Sen_A1->GetY()[i];\n",
    "    erry += Sen_A1->GetErrorX(i)*Sen_A1->GetErrorX(i); \n",
    "   // cout<<<<\"   \" <<  Sen_A1->GetErrorY(i)<<endl;\n",
    "\n",
    "    \n",
    "}\n",
    "\n",
    "float avgy = sumy/Sen_A1->GetN();\n",
    "double variance = (sumsq / Sen_A1->GetN()) - avgy*avgy;\n",
    "erry = TMath::Sqrt(erry)/Sen_A1->GetN();\n",
    "\n",
    "//double std = TMath::Sqrt(variance);\n",
    "//cout << erry << endl;\n",
    "//cout << std << endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cafc5c3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "TMultiGraph * mgraph = new TMultiGraph();\n",
    "\n",
    "\n",
    "for(int i =0; i < Sen_A1->GetN(); i++){\n",
    "    TGraph * pull_gr = new TGraph();\n",
    "    pull_gr->SetName(ang_name[i]);\n",
    "    float pull = (Sen_A1->GetY()[i]-avgy)/erry;\n",
    "    \n",
    "    //pull_gr->SetPoint(0,Sen_A1->GetX()[i], pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetPoint(0,i, pull);pull_gr->SetMarkerStyle(33);\n",
    "    pull_gr->SetMarkerSize(5);\n",
    "\n",
    "    pull_gr->SetMarkerColor(colors[i]);\n",
    "    pull_gr->SetMarkerStyle(43);\n",
    "    \n",
    "    //TAxis *xAxis = pull_gr->GetXaxis();\n",
    "    //xAxis->SetBinLabel(1,ang_name[i]);\n",
    "//pull_gr->SetMarkerColor(38);\n",
    "    \n",
    "    mgraph->Add(pull_gr);\n",
    "    \n",
    "    \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c622bfdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: canvas\n",
      "Info in <TCanvas::Print>: png file average_error_A1.png has been created\n"
     ]
    }
   ],
   "source": [
    "TCanvas * canvas = new TCanvas(\"canvas\",\"\",1200,1200);\n",
    "canvas->SetLeftMargin(0.2);\n",
    "//TGraph *name = newTGraph();\n",
    "\n",
    "\n",
    "mgraph->Draw(\"AP\");\n",
    "TAxis *xAxis = mgraph->GetXaxis();\n",
    "\n",
    "for (int i=0;i< Sen_A1->GetN(); i++){\n",
    "    \n",
    "     xAxis->SetBinLabel(xAxis->FindFixBin(i),ang_name[i]);\n",
    "}\n",
    "//mgraph->GetXaxis()->SetTitle(\"Angle\");\n",
    "\n",
    "mgraph->GetYaxis()->SetTitle(\"PULL\");\n",
    "\n",
    "//canvas->BuildLegend(0.6,0.6,0.8,0.8);\n",
    "\n",
    "canvas->Draw();\n",
    "canvas->SaveAs(\"average_error_A1.png\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d80884dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n"
     ]
    }
   ],
   "source": [
    "cout << xAxis->FindFixBin(1) <<endl;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "878a676f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d883a421",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "ROOT C++",
   "language": "c++",
   "name": "root"
  },
  "language_info": {
   "codemirror_mode": "text/x-c++src",
   "file_extension": ".C",
   "mimetype": " text/x-c++src",
   "name": "c++"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
